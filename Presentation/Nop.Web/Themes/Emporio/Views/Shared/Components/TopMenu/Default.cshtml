@inject IThemeContext themeContext
@{
    var themeName = themeContext.WorkingThemeName;
    Html.AppendScriptParts(ResourceLocation.Footer, $"~/Themes/{themeName}/Content/js/flexmenu.min.js");
}

@model TopMenuModel
<ul class="top-menu notmobile" id="top-menu">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuBefore })
    @if (Model.DisplayHomepageMenuItem)
    {
        <li><a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
    }
    @if (!Model.UseAjaxMenu)
    {
        var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
        @foreach (var category in rootCategories)
        {
            var categoryLineModel = new TopMenuModel.CategoryLineModel
            {
                Category = category
            };
            @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
        }


    }
    @foreach (var topic in Model.Topics)
    {
        <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
    }
    @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
    {
        <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
    }
    @if (Model.DisplayProductSearchMenuItem)
    {
        <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
    }
    @if (Model.DisplayCustomerInfoMenuItem)
    {
        <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
    }
    @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
    {
        <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
    }
    @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
    {
        <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
    }
    @if (Model.DisplayContactUsMenuItem)
    {
        <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuAfter })
</ul>
@{
    var rootCategoriesResponsive = Model.Categories.ToList();
    //name it "Categories" if we have only categories. Otherwise, "Menu"
    var responsiveMenuTitle = Model.HasOnlyCategories ? T("Categories") : T("Menu");
    <div class="menu-left-slide">
        <div class="menu-toggle">@responsiveMenuTitle</div>
        <div class="menu-top">@responsiveMenuTitle<i></i></div>
        <div class="select-box-wrapper">
            @await Component.InvokeAsync("TaxTypeSelector")
            @await Component.InvokeAsync("CurrencySelector")
            @await Component.InvokeAsync("LanguageSelector")
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderSelectors })
        </div>

        <ul class="top-menu mobile">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MobHeaderMenuBefore })
            @if (Model.DisplayHomepageMenuItem)
            {
                <li><a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
            }
            @if (!Model.UseAjaxMenu)
            {
                @foreach (var category in rootCategoriesResponsive)
                {
                    var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = category,
                        ResponsiveMobileMenu = true
                    };
                    @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
                }

            }
            @foreach (var topic in Model.Topics)
            {
                <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
            }
            @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
            {
                <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
            }
            @if (Model.DisplayProductSearchMenuItem)
            {
                <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
            }
            @if (Model.DisplayCustomerInfoMenuItem)
            {
                <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
            }
            @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
            {
                <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
            }
            @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
            {
                <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
            }
            @if (Model.DisplayContactUsMenuItem)
            {
                <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MobHeaderMenuAfter })
        </ul>
    </div>
    <div class="mobile-nav-overlay"></div>
    @if (Model.UseAjaxMenu)
    {
        <script asp-location="Footer">
        $(document).ready(function () {
            $('.menu-toggle').on('click', function () {
                $(this).siblings('.top-menu.mobile').slideToggle('slow');
            });

            mainMenu.init('@Url.Action("GetCatalogRoot", "Catalog")', '@Url.Action("GetCatalogSubCategories", "Catalog")', 'ul.top-menu.notmobile', 'ul.top-menu.mobile');
        });
        </script>

        Html.AppendScriptParts(ResourceLocation.Footer, "~/js/public.menu.js");

    }
    else
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.menu-toggle').on('click', function () {
                    $(this).siblings('.top-menu.mobile').slideToggle('slow');
                });
                $('.top-menu.mobile .sublist-toggle').on('click', function () {
                    $(this).siblings('.sublist').slideToggle('slow');
                });
            });
        </script>

    }
    <script asp-location="Footer">
        $(document).ready(function () {
            var onClickShowLeftSlide = function () {
                $('.menu-left-slide').toggle('slide', { direction: 'left' }, 300).animate({ 'left': '0px' });
                $('.mobile-nav-overlay').css('visibility', 'visible');

            };
            $(".menu-bar").click(onClickShowLeftSlide);

            var onClickCloseLeftSlide = function () {
                $('.menu-left-slide').toggle('slide', { direction: 'left' }, 300).animate({ 'left': '-250px' });
                $('.mobile-nav-overlay').css('visibility', 'hidden');
            };
            $(".menu-top i", ".menu-left-slide").click(onClickCloseLeftSlide);

            var onClickMobileNavOverlay = function () {
                onClickCloseLeftSlide();
            };
            $('.mobile-nav-overlay').click(onClickMobileNavOverlay);

            $('#top-menu').flexMenu({
                showOnHover: true
            })
        });
    </script>
}
